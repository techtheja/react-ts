{"version":3,"sources":["components/TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TodoList","useState","value","setValue","todos","setTodos","addTodo","text","newTodos","complete","console","log","onSubmit","e","preventDefault","type","onChange","target","required","map","todo","index","key","onClick","completeTodo","splice","removeTodo","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4NASaA,EAAW,WAAoB,IAAD,EACfC,mBAAiB,SADF,mBAClCC,EADkC,KAC3BC,EAD2B,OAEfF,mBAAkB,IAFH,mBAElCG,EAFkC,KAE3BC,EAF2B,KAUnCC,EAAU,SAACC,GACf,IAAMC,EAAiB,sBAAOJ,GAAP,CAAc,CAAEG,OAAME,UAAU,KACvDJ,EAASG,GACTE,QAAQC,IAAIH,IAed,OACE,kBAAC,WAAD,KACE,yCACA,0BAAMI,SA3BW,SAACC,GACpBA,EAAEC,iBACFR,EAAQJ,GACRC,EAAS,MAyBL,2BACEY,KAAK,OACLb,MAAOA,EACPc,SAAU,SAAAH,GAAC,OAAIV,EAASU,EAAEI,OAAOf,QACjCgB,UAAQ,IAEV,4BAAQH,KAAK,UAAb,aAEF,iCACGX,EAAMe,KAAI,SAACC,EAAaC,GAAd,OACT,kBAAC,WAAD,CAAUC,IAAKD,GACb,6BAAMD,EAAKb,MACX,4BAAQQ,KAAK,SAASQ,QAAS,kBA5BpB,SAACF,GACpB,IAAMb,EAAiB,YAAOJ,GAC9BI,EAASa,GAAOZ,UAAYD,EAASa,GAAOZ,SAC5CJ,EAASG,GAyBoCgB,CAAaH,KAC/C,GACAD,EAAKX,SAAW,aAAe,WAC/B,IAEH,4BAAQM,KAAK,SAASQ,QAAS,kBA3BtB,SAACF,GAClB,IAAMb,EAAiB,YAAOJ,GAC9BI,EAASiB,OAAOJ,EAAO,GACvBhB,EAASG,GAwBoCkB,CAAWL,KAAhD,eC9CGM,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,a","file":"static/js/main.41394004.chunk.js","sourcesContent":["import React, { useState, Fragment } from 'react'\n\ntype FormElem = React.FormEvent<HTMLFormElement>\n\ninterface ITodo {\n  text: string\n  complete: boolean\n}\n\nexport const TodoList = (): JSX.Element => {\n  const [value, setValue] = useState<string>('Empty')\n  const [todos, setTodos] = useState<ITodo[]>([])\n\n  const handleSubmit = (e: FormElem): void => {\n    e.preventDefault()\n    addTodo(value)\n    setValue('')\n  }\n\n  const addTodo = (text: string): void => {\n    const newTodos: ITodo[] = [...todos, { text, complete: false }]\n    setTodos(newTodos)\n    console.log(newTodos)\n  }\n\n  const completeTodo = (index: number): void => {\n    const newTodos: ITodo[] = [...todos]\n    newTodos[index].complete = !newTodos[index].complete\n    setTodos(newTodos)\n  }\n\n  const removeTodo = (index: number): void => {\n    const newTodos: ITodo[] = [...todos]\n    newTodos.splice(index, 1)\n    setTodos(newTodos)\n  }\n\n  return (\n    <Fragment>\n      <h1>ToDo List</h1>\n      <form onSubmit={handleSubmit}>\n        <input\n          type='text'\n          value={value}\n          onChange={e => setValue(e.target.value)}\n          required\n        />\n        <button type='submit'>Add ToDo</button>\n      </form>\n      <section>\n        {todos.map((todo: ITodo, index: number) => (\n          <Fragment key={index}>\n            <div>{todo.text}</div>\n            <button type='button' onClick={() => completeTodo(index)}>\n              {''}\n              {todo.complete ? 'Incomplete' : 'Complete'}\n              {''}\n            </button>\n            <button type='button' onClick={() => removeTodo(index)}>\n              &times;\n            </button>\n          </Fragment>\n        ))}\n      </section>\n    </Fragment>\n  )\n}\n","import React from 'react'\nimport './App.css'\nimport { TodoList } from './components/TodoList'\n\nfunction App() {\n  return (\n    <div className='App'>\n      <TodoList />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}